using System.Collections.Immutable;
using System.Linq;
using System.Text;
using CriterionParser.SourceGenerator.Infrastructure;
using CriterionParser.SourceGenerator.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace CriterionParser.SourceGenerator;

public sealed partial class CriteriaFactrorySourceGenerator
{
    private static void Generate(SourceProductionContext context, ImmutableArray<CriteriaInformation> criterion)
    {
        var writer = new SourceCodeWriter()
            .AppendLine("// <auto-generated />")
            .AppendLine()
            .AppendLine("using CriterionParser.Factories;")
            .AppendLine("using CriterionParser.Models;")
            .AppendLine("using CriterionParser.Enums;")
            .AppendLine()
            .AppendLine("public sealed class CriteriaFactory")
            .AppendIndentedLine(": ICriteriaFactory");

        using (writer.CreateScope())
        {
            writer.AppendLine("public Criteria Create(string identifier, Operator op, Comparator comparator, string value) =>");

            writer.IndentationLevel++;

            writer
                .AppendLine("identifier switch")
                .AppendLine('{');

            writer.IndentationLevel++;
            foreach (var criteria in criterion)
                writer
                    .AppendIndent()
                    .Append(string.Join(" or ", criteria.Identifiers.Select(identifier => $"\"{identifier}\"")))
                    .Append(" => new ")
                    .Append(criteria.ClassName)
                    .Append("(op, comparator, value),")
                    .AppendLine();
            writer.IndentationLevel--;
                
            writer
                .AppendIndentedLine("_ => throw new NotImplementedException()")
                .AppendLine("};");
            
            writer.IndentationLevel--;
        }

        context.AddSource("CriteriaFactory.g.cs", SourceText.From(writer.ToString(), Encoding.UTF8));
    }
}